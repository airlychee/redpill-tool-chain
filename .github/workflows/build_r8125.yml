name: Build_R8125

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-18.04
    name: Compile "${{matrix.platform}} ${{matrix.version}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: apollolake
            version: 7.1
          - platform: geminilake
            version: 7.1

    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
        with:
            ref: master

      - name: Checkout toolkit repository
        uses: actions/checkout@v2
        with:
          repository: SynologyOpenSource/pkgscripts-ng
          ref: ${DSM_VERSION}
          path: pkgscripts-ng
        
      - name: Init build dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E snap set system refresh.retain=2
          sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
          sudo -E apt-get -y autoremove --purge
          sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
          [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo -E apt-get update -y
          sudo -E apt-get install -y python3 wget tar && ln -s /usr/bin/python3 /usr/local/bin/python
          sudo -E apt-get clean
          git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
          df -h

      # https://github.com/cwuensch/SynoBuild
      - name: Download DSM toolkit
        run: |
         sudo mkdir -p /toolkit/build_env/ds.x64-${{matrix.version}} /toolkit/source
         sudo rsync -aIv pkgscripts-ng/ /toolkit/pkgscripts-ng/
         cd /toolkit
         sudo pkgscripts-ng/EnvDeploy -t toolkit_tarballs -v ${{matrix.version}} -p x64
         sudo wget -qO- https://downloads.sourceforge.net/project/dsgpl/toolkit/DSM${{matrix.version}}/base_env-${{matrix.version}}.txz | tar -xJhv -C build_env/ds.x64-${{matrix.version}}
         sudo wget -qO- https://downloads.sourceforge.net/project/dsgpl/toolkit/DSM${{matrix.version}}/ds.x64-${{matrix.version}}.env.txz | tar -xJhv -C build_env/ds.x64-${{matrix.version}}
         sudo wget -qO- https://downloads.sourceforge.net/project/dsgpl/toolkit/DSM${{matrix.version}}/ds.x64-${{matrix.version}}.dev.txz | tar -xJhv -C build_env/ds.x64-${{matrix.version}}
         
      - name: Copy Source
        run: |
         sudo svn export https://github.com/jinlife/OpenWrt-Autobuild/trunk/r8125 /toolkit/source/r8125
         sudo svn export https://github.com/jinlife/OpenWrt-Autobuild/trunk/r8152 /toolkit/source/r8152
         sudo patch -d /toolkit/source/r8152/src -p1 -i /tmp/r8152/patches/100-add-LED-configuration-from-OF.patch

      # http://www.wolfteck.com/2019/03/02/packaging_rtl88x2bu_for_synology_nas/
      - name: ENV Prepare
        working-directory: /toolkit/pkgscripts-ng
        run: |
          sudo ./EnvDeploy -v ${{matrix.version}} -p ${{matrix.platform}}
          sudo gpg --gen-key
          sudo cp -r ~/.gnupg /toolkit/build_env/ds.x64-${{matrix.version}}/root/
          
      - name: Make Config
        working-directory: /toolkit
        run: |
          sudo make oldconfig
          sudo sed -i -e 's#CONFIG_SYSTEM_TRUSTED_KEYS="debian/canonical-certs.pem"#CONFIG_SYSTEM_TRUSTED_KEYS=""#g' .config
          cat .config
      
      - name: Make Prepare
        working-directory: /toolkit
        run: |
          sudo make -j`nproc` modules_prepare
      
      - name: Compile Linux
        working-directory: /usr/src/linux
        run: |
          sudo make -j`nproc` bzImage;sudo make -j`nproc`;sudo make -j`nproc` modules        
      
      - name: Make modules
        working-directory: /usr/src/linux
        run: |
          sudo make INSTALL_MOD_STRIP=1 modules_install
        
      - name: Compile drivers
        working-directory: /tmp
        run: |
          echo "Start"
          ls /lib/modules/
          echo "End"
          Linux_VERSION=${{ steps.var.outputs.UKernel }}
          cd /tmp/r8125
          sudo make -C /lib/modules/${Linux_VERSION}/build M=$PWD/src modules
          sudo make -C /lib/modules/${Linux_VERSION}/build M=$PWD/src INSTALL_MOD_STRIP=1 INSTALL_MOD_DIR=kernel/drivers/net/ethernet/realtek/ modules_install
          ls /lib/modules/${Linux_VERSION}/kernel/drivers/net/ethernet/realtek/
          cd /tmp/r8152
          sudo make -C /lib/modules/${Linux_VERSION}/build M=$PWD/src modules
          sudo make -C /lib/modules/${Linux_VERSION}/build M=$PWD/src INSTALL_MOD_STRIP=1 INSTALL_MOD_DIR=kernel/drivers/net/usb/ modules_install
          ls /lib/modules/${Linux_VERSION}/kernel/drivers/net/usb/

      - name: Find files
        run: |
          Linux_VERSION=${{ steps.var.outputs.UKernel }}
          sudo rm -rf ./artifact
          sudo mkdir -p ./artifact
          sudo chmod -R 777 ./artifact
          sudo cp /lib/modules/${Linux_VERSION}/kernel/drivers/net/ethernet/realtek/r8125.ko ./artifact/r8125.ko
          sudo cp /lib/modules/${Linux_VERSION}/kernel/drivers/net/usb/r8152.ko ./artifact/r8152.ko        

      - name: Upload github actions
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.co.outputs.release_tag }}
          path: artifact/*
          if-no-files-found: error

      #- name: Delete old workflow
      #  uses: Mattraks/delete-workflow-runs@v2
      #  with:
      #    retain_days: 1
      #    keep_minimum_runs: 3
